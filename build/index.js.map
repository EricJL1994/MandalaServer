{"version":3,"sources":["webpack://my-webpack-project/external \"lowdb\"","webpack://my-webpack-project/external \"lowdb/adapters/FileSync\"","webpack://my-webpack-project/webpack/bootstrap","webpack://my-webpack-project/external \"express\"","webpack://my-webpack-project/./src/index.ts","webpack://my-webpack-project/./src/commonFunctions.ts"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","database","lowDB","app","console","log","server","listen","process","on","close","get","_req","res","send","req","query","color","trim","rawData","filter","dificultyName","JSON","parse","size","value","map","element","number","ticksToMicrotime","dateValue","epochMicrotimeDiff","Math","abs","Date","setFullYear","date","getDate","getMonth","getFullYear","post","newProblemData","problem","push","write","status"],"mappings":"syCAAAA,EAAOC,QAAUC,QAAQ,U,OCAzBF,EAAOC,QAAUC,QAAQ,6BCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,Q,MCrBf,MAAM,EAA+BC,QAAQ,WCM7C,IAWMO,EAXQ,EAAQ,IAWLC,CADD,IATC,EAAQ,IAST,CADI,EAAQ,OAItBC,EAAM,IAgBPC,QAAQC,IAAI,yCAEjB,IAAMC,EAASH,EAAII,OAfN,KAemB,WAAM,OAAAH,QAAQC,IAAI,6CAElDG,QAAQC,GAAG,WAAW,WACtBH,EAAOI,OAAM,WACTN,QAAQC,IAAI,4BAIhBF,EAAIQ,IAAI,KAAK,SAACC,EAAWC,GACvBA,EAAIC,KAAK,kBAKXX,EAAIQ,IAAI,gBAAgB,SAACI,EAAmCF,GAO1D,GAHAT,QAAQC,IAAI,qBACZD,QAAQC,IAAIU,EAAIC,OAEVD,EAAIC,MAAMC,MAAO,CAErB,IAAMA,EAAQF,EAAIC,MAAMC,MAAMC,OAE1BC,EAAUlB,EAASU,IAAI,YAAYS,OAAO,CAACC,cAAeJ,IAC9Db,QAAQC,IAAI,mBACZD,QAAQC,IAAIiB,KAAKC,MAAMJ,IAEvBN,EAAIC,KAAK,6BAA6BG,EAAK,SAASE,QAEjDN,EAAIC,KAAK,gDAAgDb,EAASU,IAAI,YAAYa,OAAOC,QAAO,QAAQxB,EAASU,IAAI,YAAYc,QAAQC,KAAI,SAACC,GAAyB,OAAGA,EAAQN,cAAa,IAAIM,EAAQC,OAAM,KC5ClNC,ED4CoPF,EAAQG,UC5CjO,IAG3BC,EAAqBC,KAAKC,IAAI,IAAIC,KAAK,EAAG,EAAG,GAAGC,YAAY,KAMvCC,EAHlB,IAAIF,KAAKL,EAAmBE,IAIpBM,UAAS,IAAID,EAAKE,WAAU,IAAIF,EAAKG,eAD/C,IAAoBH,EATrBP,EAGAE,SD8CN5B,EAAIqC,KAAK,eAAe,SAACzB,EAAqCF,GAC5D,IAAM4B,EAAiBnB,KAAKC,MAAMR,EAAIC,MAAM0B,SAC5CtC,QAAQC,IAAIoC,GAEZxC,EAASU,IAAI,YAAYgC,KAAKF,GAAgBG,QAI9C/B,EAAIgC,OAAO,KAAK/B,KAAK,yC","file":"index.js","sourcesContent":["module.exports = require(\"lowdb\");;","module.exports = require(\"lowdb/adapters/FileSync\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"express\");;","// const express = require('express')\nimport * as express from \"express\";\n// import express from \"express\"\n// const fs = require('fs') // fs.readFileSync lee de forma síncrona, fs.readFile lee de forma asíncrona\n// import * as fs from \"fs\";\n\nconst lowDB = require('lowdb')\nconst FileSync = require('lowdb/adapters/FileSync')\n//import lowDB from 'lowdb';\n// import * as FileSync from 'lowdb/adapters/FileSync';\n\n// const { convertTicksToDate, formatDate } = require('./commonFunctions')\nimport { convertTicksToDate, formatDate } from \"./commonFunctions\";\n\n// import * as StorageData from \"./storageData/database.json\";\nconst StorageData = require('./storageData/database.json');\nconst adapter = new FileSync(StorageData)\nconst database = lowDB(adapter)\n\nconst app = express()\n\nconst hostname = 'localhost';\nconst port = 3000;\n\ntype ProblemType = {\n  dificultyName: String\n  number: Number\n  holdColor: String\n  dateValue: Number\n  pending: Boolean\n  intersectionsName: Object[]\n  wall: Number\n}\n\nif (process.env.NODE_ENV !== 'production') console.log('Looks like we are in development mode!');\nelse console.log('Looks like we are in production mode!')\n\nconst server = app.listen(port, () => console.log(`Server ready on http://${hostname}:${port}/`))\n\nprocess.on('SIGTERM', () => {\nserver.close(() => {\n    console.log('Process terminated')\n  })\n})\n\napp.get('/', (_req: any, res: any) => {\n  res.send('Hello world')\n})\n\n// <>------------------------------------------<>------------------------------------------<>\n\napp.get('/getproblems', (req: { query: { color: string } }, res: any) => {\n  // req.query --------------- www.url.com/?color=verde&var2=loquesea2\n  // req.params -------------- www.url.com/verde/loquesea2\n\n  console.log('Request petition:')\n  console.log(req.query)\n\n  if (!!req.query.color) {\n    \n    const color = req.query.color.trim()\n\n    var rawData = database.get('problems').filter({dificultyName: color})\n    console.log('JSON procesado:')\n    console.log(JSON.parse(rawData))\n\n    res.send(`Bloques y traves de color ${color} son: ${rawData}`)\n  }\n  else res.send(`DEVOLVER TODOS LOS BLOQUES Y LAS TRAVES (hay ${database.get('problems').size().value()}): + ${database.get('problems').value().map((element: ProblemType) => `${element.dificultyName}-${element.number}-${formatDate(convertTicksToDate(element.dateValue))}`)}`)\n})\n\n// <>------------------------------------------<>------------------------------------------<>\n\napp.post('/addproblem', (req: { query: { problem: string } }, res: any) => {\n  const newProblemData = JSON.parse(req.query.problem)\n  console.log(newProblemData)\n\n  database.get('problems').push(newProblemData).write()\n\n  // fs.writeFileSync(`./storageData/${newProblemData.dificultyName}_${newProblemData.number}.json`, JSON.stringify(newProblemData))\n\n  res.status(200).send('Se ha insertado el nuevo problema')\n})","export function isEmpty(str: string) {\r\n  return (!str || str.length === 0 );\r\n}\r\n\r\nexport function isBlank(str: string) {\r\n  return (!str || /^\\s*$/.test(str));\r\n}\r\n\r\n/*\r\n  if (!!str) {\r\n    // Some code here\r\n  }\r\n\r\n  if (Boolean(str)) {\r\n    // Code here\r\n  }\r\n\r\n * Both do the same function. Typecast the variable to Boolean, where str is a variable.\r\n * It returns false for null, undefined, 0, 000, \"\", false.\r\n * It returns true for string \"0\" and whitespace \" \".\r\n*/\r\n\r\nexport function convertTicksToDate(ticks: any) {\r\n  //ticks are in nanotime; convert to microtime\r\n  var ticksToMicrotime = ticks / 10000;\r\n\r\n  //ticks are recorded from 1/1/1; get microtime difference from 1/1/1/ to 1/1/1970\r\n  var epochMicrotimeDiff = Math.abs(new Date(0, 0, 1).setFullYear(1));\r\n\r\n  //new date is ticks, converted to microtime, minus difference from epoch microtime\r\n  return new Date(ticksToMicrotime - epochMicrotimeDiff);\r\n}\r\n\r\nexport function formatDate(date: Date) {\r\n  return `${date.getDate()}/${date.getMonth()}/${date.getFullYear()}`\r\n}"],"sourceRoot":""}